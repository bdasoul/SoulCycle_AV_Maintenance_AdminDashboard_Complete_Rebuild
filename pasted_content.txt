import os

# Define the base src directory and subdirectories
src_base = os.path.join(extract_dir, "src")
models_dir = os.path.join(src_base, "models")
routes_dir = os.path.join(src_base, "routes")

# Create directories
os.makedirs(models_dir, exist_ok=True)
os.makedirs(routes_dir, exist_ok=True)

# File definitions with basic boilerplate content
files_to_create = {
    os.path.join(models_dir, "__init__.py"): "",
    os.path.join(models_dir, "db.py"): """from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

def init_db(app):
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///maintenance.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    db.init_app(app)
""",
    os.path.join(models_dir, "maintenance.py"): """from .db import db

class MaintenanceTask(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    studio_id = db.Column(db.Integer, db.ForeignKey('studio.id'))
    equipment_id = db.Column(db.Integer, db.ForeignKey('equipment.id'))
    task_type = db.Column(db.String(100))
    due_date = db.Column(db.Date)
    status = db.Column(db.String(50))
""",
    os.path.join(models_dir, "studios.py"): """from .db import db

class Studio(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    location = db.Column(db.String(150))
    status = db.Column(db.String(50))
""",
    os.path.join(models_dir, "equipment.py"): """from .db import db

class Equipment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    type = db.Column(db.String(50))
    studio_id = db.Column(db.Integer, db.ForeignKey('studio.id'))
    maintenance_interval = db.Column(db.Integer)
""",
    os.path.join(models_dir, "alerts.py"): """from .db import db

class Alert(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    task_id = db.Column(db.Integer, db.ForeignKey('maintenance_task.id'))
    level = db.Column(db.String(50))
    message = db.Column(db.String(255))
    created_at = db.Column(db.DateTime)
""",
    os.path.join(models_dir, "reports.py"): """from .db import db

class Report(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    studio_id = db.Column(db.Integer, db.ForeignKey('studio.id'))
    generated_at = db.Column(db.DateTime)
    summary = db.Column(db.Text)
""",
    os.path.join(routes_dir, "__init__.py"): "",
}

# Create empty blueprints for each route
route_modules = ["maintenance", "studios", "equipment", "alerts", "reports"]
for module in route_modules:
    files_to_create[os.path.join(routes_dir, f"{module}.py")] = f"""from flask import Blueprint, request, jsonify

{module}_bp = Blueprint('{module}', __name__)

@{module}_bp.route('/', methods=['GET'])
def get_all():
    return jsonify({{'message': 'List of all {module}'}})

@{module}_bp.route('/', methods=['POST'])
def create():
    return jsonify({{'message': 'Create new {module}'}})

@{module}_bp.route('/<int:id>', methods=['PUT'])
def update(id):
    return jsonify({{'message': f'Update {module} {{id}}'}})

@{module}_bp.route('/<int:id>', methods=['DELETE'])
def delete(id):
    return jsonify({{'message': f'Delete {module} {{id}}'}})
"""

# Write all files
for path, content in files_to_create.items():
    with open(path, "w") as f:
        f.write(content)

# Display structure to confirm
created_structure = sorted(os.listdir(models_dir) + os.listdir(routes_dir))
created_structure
